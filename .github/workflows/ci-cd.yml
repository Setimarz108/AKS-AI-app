name: RetailBot CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  security-events: write

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  TF_WORKING_DIR: ./terraform

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      terraform: ${{ steps.filter.outputs.terraform }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'app/!(frontend)/**'
            frontend:
              - 'app/frontend/**'
            terraform:
              - 'terraform/**'

  test-backend:
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.backend == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          cd app
          pip install -r requirements.txt
      - name: Test with pytest
        run: |
          cd app
          python -m pytest tests/ -v --cov=. --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./app/coverage.xml
          flags: backend

  test-frontend:
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/frontend/package-lock.json
      - name: Install dependencies
        run: |
          cd app/frontend
          npm ci
      - name: Build frontend
        run: |
          cd app/frontend
          npm run build

  source-security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-source.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-source.sarif'
          category: 'trivy-source-code'

  build:
    needs: [changes, test-backend, test-frontend, source-security-scan]
    runs-on: ubuntu-latest
    if: |
      always() && 
      github.ref == 'refs/heads/main' && 
      (needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true') &&
      (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped') &&
      (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped') &&
      needs.source-security-scan.result == 'success'
    outputs:
      image-tag: ${{ steps.meta.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Generate build metadata
        id: meta
        run: echo "tag=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }
      
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}
      
      - name: Build and push backend image
        if: needs.changes.outputs.backend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: |
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-api:${{ steps.meta.outputs.tag }}
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-api:latest
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-api:stable
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend
      
      - name: Build and push frontend image
        if: needs.changes.outputs.frontend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./app/frontend
          push: true
          tags: |
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-frontend:${{ steps.meta.outputs.tag }}
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-frontend:latest
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-frontend:stable
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend

  backend-image-scan:
    needs: [build, changes]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.changes.outputs.backend == 'true'
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }
      
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}
      
      - name: Scan backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.ACR_NAME }}.azurecr.io/retailbot-api:${{ needs.build.outputs.image-tag }}'
          format: 'sarif'
          output: 'trivy-backend.sarif'
      
      - name: Upload backend scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-backend.sarif'
          category: 'trivy-backend-image'

  frontend-image-scan:
    needs: [build, changes]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.changes.outputs.frontend == 'true'
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }
      
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}
      
      - name: Scan frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.ACR_NAME }}.azurecr.io/retailbot-frontend:${{ needs.build.outputs.image-tag }}'
          format: 'sarif'
          output: 'trivy-frontend.sarif'
      
      - name: Upload frontend scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-frontend.sarif'
          category: 'trivy-frontend-image'

  deploy:
    needs: [build, backend-image-scan, frontend-image-scan]
    runs-on: ubuntu-latest
    if: |
      always() &&
      github.ref == 'refs/heads/main' &&
      needs.build.result == 'success' &&
      (needs.backend-image-scan.result == 'success' || needs.backend-image-scan.result == 'skipped') &&
      (needs.frontend-image-scan.result == 'success' || needs.frontend-image-scan.result == 'skipped')
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }
      
      - name: Terraform Init
        run: |
          cd ${{ env.TF_WORKING_DIR }}
          export ARM_ACCESS_KEY="${{ secrets.AZURE_STORAGE_KEY }}"
          terraform init
      
      - name: Terraform Plan
        run: |
          cd ${{ env.TF_WORKING_DIR }}
          export ARM_ACCESS_KEY="${{ secrets.AZURE_STORAGE_KEY }}"
          terraform plan \
            -target=module.container_instances.azurerm_container_group.app \
            -var="frontend_image_tag=${{ needs.build.outputs.image-tag }}" \
            -var="backend_image_tag=${{ needs.build.outputs.image-tag }}"
      
      - name: Terraform Apply
        run: |
          cd ${{ env.TF_WORKING_DIR }}
          export ARM_ACCESS_KEY="${{ secrets.AZURE_STORAGE_KEY }}"
          terraform apply -auto-approve \
            -target=module.container_instances.azurerm_container_group.app \
            -var="frontend_image_tag=${{ needs.build.outputs.image-tag }}" \
            -var="backend_image_tag=${{ needs.build.outputs.image-tag }}"
      
      - name: Verify deployment
        run: |
          sleep 30
          FRONTEND_URL=$(cd ${{ env.TF_WORKING_DIR }} && terraform output -raw frontend_url)
          for i in {1..5}; do
            if curl -f "$FRONTEND_URL/health"; then
              echo "Health check passed"
              break
            else
              echo "Health check failed, attempt $i/5"
              sleep 10
            fi
          done

  rollback:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }
      
      - name: Automatic rollback
        run: |
          cd ${{ env.TF_WORKING_DIR }}
          export ARM_ACCESS_KEY="${{ secrets.AZURE_STORAGE_KEY }}"
          terraform init
          echo "Rolling back to stable version due to deployment failure"
          terraform apply -auto-approve \
            -target=module.container_instances.azurerm_container_group.app \
            -var="frontend_image_tag=stable" \
            -var="backend_image_tag=stable"