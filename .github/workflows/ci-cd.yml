name: RetailBot CI/CD

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate image tag
        id: tag
        run: echo "image_tag=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }
      
      - name: Build and push backend using ACR
        run: |
          echo "Building backend with ACR build..."
          az acr build --registry ${{ env.ACR_NAME }} \
            --image retailbot-api:${{ steps.tag.outputs.image_tag }} \
            --image retailbot-api:latest \
            ./app
      
      - name: Build and push frontend using ACR
        run: |
          echo "Building frontend with ACR build..."
          az acr build --registry ${{ env.ACR_NAME }} \
            --image retailbot-frontend:${{ steps.tag.outputs.image_tag }} \
            --image retailbot-frontend:latest \
            ./app/frontend
      
      - name: Verify images exist
        run: |
          echo "Verifying images were created..."
          az acr repository show-tags --name ${{ env.ACR_NAME }} --repository retailbot-api --output table
          az acr repository show-tags --name ${{ env.ACR_NAME }} --repository retailbot-frontend --output table
          
          # Verify specific tags exist
          if ! az acr repository show-tags --name ${{ env.ACR_NAME }} --repository retailbot-api --query "contains(@, '${{ steps.tag.outputs.image_tag }}')" -o tsv | grep -q true; then
            echo "ERROR: Backend image not found"
            exit 1
          fi
          
          if ! az acr repository show-tags --name ${{ env.ACR_NAME }} --repository retailbot-frontend --query "contains(@, '${{ steps.tag.outputs.image_tag }}')" -o tsv | grep -q true; then
            echo "ERROR: Frontend image not found"
            exit 1
          fi
          
          echo "SUCCESS: All images verified"
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
      
      - name: Deploy with Terraform
        run: |
          cd terraform
          export ARM_ACCESS_KEY="${{ secrets.AZURE_STORAGE_KEY }}"
          terraform init
          terraform apply -auto-approve \
            -target=module.container_instances.azurerm_container_group.app \
            -var="frontend_image_tag=${{ steps.tag.outputs.image_tag }}" \
            -var="backend_image_tag=${{ steps.tag.outputs.image_tag }}"
      
      - name: Verify deployment
        run: |
          echo "Waiting for containers to start..."
          sleep 45
          cd terraform
          export ARM_ACCESS_KEY="${{ secrets.AZURE_STORAGE_KEY }}"
          FRONTEND_URL=$(terraform output -raw frontend_url)
          echo "Testing frontend: $FRONTEND_URL"
          curl -f "$FRONTEND_URL" || echo "Frontend check failed but continuing..."
          echo "Testing backend health: $FRONTEND_URL:8000/health"
          curl -f "$FRONTEND_URL:8000/health" || echo "Backend check failed but continuing..."
          echo "Deployment completed"

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [build-and-deploy]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
      
      - name: Rollback to latest stable
        run: |
          cd terraform
          export ARM_ACCESS_KEY="${{ secrets.AZURE_STORAGE_KEY }}"
          terraform init
          echo "Rolling back to latest stable version"
          terraform apply -auto-approve \
            -target=module.container_instances.azurerm_container_group.app \
            -var="frontend_image_tag=latest" \
            -var="backend_image_tag=latest"