name: RetailBot CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  security-events: write

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  TF_WORKING_DIR: ./terraform

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      terraform: ${{ steps.filter.outputs.terraform }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'app/!(frontend)/**'
            frontend:
              - 'app/frontend/**'
            terraform:
              - 'terraform/**'

  test-backend:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('app/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Test Backend with Coverage
        run: |
          cd app
          pip install -r requirements.txt
          pytest --cov=. --cov-report=xml --cov-report=term tests/ || echo "No tests found - skipping"
      
      - name: Upload Backend Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./app/coverage.xml
          flags: backend

  test-frontend:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('app/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
          
      - name: Test Frontend
        run: |
          cd app/frontend
          npm ci
          npm run build
          npm test -- --coverage --watchAll=false || echo "No tests found - skipping"

  security-scan:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner (Source Code)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    needs: [changes, security-scan]
    runs-on: ubuntu-latest
    if: |
      always() && 
      github.ref == 'refs/heads/main' && 
      (needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true') &&
      (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped') &&
      (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped') &&
      needs.security-scan.result == 'success'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tag }}
      backend-built: ${{ needs.changes.outputs.backend }}
      frontend-built: ${{ needs.changes.outputs.frontend }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Azure using OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}
      
      - name: Generate image tag
        id: meta
        run: |
          TAG="${GITHUB_SHA:0:8}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Image tag: ${TAG}"
      
      - name: Build and push backend image
        if: needs.changes.outputs.backend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: |
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-api:${{ steps.meta.outputs.tag }}
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-api:latest
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-api:stable
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend
      
      - name: Build and push frontend image
        if: needs.changes.outputs.frontend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./app/frontend
          push: true
          tags: |
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-frontend:${{ steps.meta.outputs.tag }}
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-frontend:latest
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-frontend:stable
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend

      - name: Scan backend image for vulnerabilities
        if: needs.changes.outputs.backend == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.ACR_NAME }}.azurecr.io/retailbot-api:${{ steps.meta.outputs.tag }}'
          format: 'sarif'
          output: 'trivy-backend-image.sarif'

      - name: Upload backend image scan results
        if: needs.changes.outputs.backend == 'true'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-backend-image.sarif'

      - name: Scan frontend image for vulnerabilities
        if: needs.changes.outputs.frontend == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.ACR_NAME }}.azurecr.io/retailbot-frontend:${{ steps.meta.outputs.tag }}'
          format: 'sarif'
          output: 'trivy-frontend-image.sarif'

      - name: Upload frontend image scan results
        if: needs.changes.outputs.frontend == 'true'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-frontend-image.sarif'
  
  deploy:
    needs: [build, changes, test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: |
      always() &&
      github.ref == 'refs/heads/main' && 
      (needs.build.outputs.backend-built == 'true' || needs.build.outputs.frontend-built == 'true') &&
      needs.build.result == 'success'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: latest
    
    - name: Login to Azure using OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Configure Terraform for Azure Storage
      run: |
        echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
        echo "ARM_STORAGE_USE_AZUREAD=true" >> $GITHUB_ENV

    - name: Terraform Init
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform init
    
    - name: Terraform Plan
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform plan \
          -target=module.container_instances.azurerm_container_group.app \
          -var="frontend_image_tag=${{ needs.build.outputs.image-tag }}" \
          -var="backend_image_tag=${{ needs.build.outputs.image-tag }}"
    
    - name: Terraform Apply
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform apply -auto-approve \
          -target=module.container_instances.azurerm_container_group.app \
          -var="frontend_image_tag=${{ needs.build.outputs.image-tag }}" \
          -var="backend_image_tag=${{ needs.build.outputs.image-tag }}"
    
    - name: Wait for deployment
      run: sleep 60
    
    - name: Verify deployment health
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        FRONTEND_URL=$(terraform output -raw frontend_url)
        BACKEND_URL=$(terraform output -raw backend_url)
        
        echo "Testing frontend: $FRONTEND_URL"
        curl -f --retry 3 --retry-delay 10 "$FRONTEND_URL" || exit 1
        
        echo "Testing backend health: $BACKEND_URL/health"
        curl -f --retry 3 --retry-delay 10 "$BACKEND_URL/health" || exit 1
        
        echo "Deployment verification successful"
    
    - name: Get deployment outputs
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        echo "Frontend URL: $(terraform output -raw frontend_url)"
        echo "Backend URL: $(terraform output -raw backend_url)"

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy]
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    
    - name: Login to Azure using OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Configure Terraform for Azure Storage
      run: |
        echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
        echo "ARM_STORAGE_USE_AZUREAD=true" >> $GITHUB_ENV
    
    - name: Automatic rollback to stable version
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform init
        terraform apply -auto-approve \
          -target=module.container_instances.azurerm_container_group.app \
          -var="frontend_image_tag=stable" \
          -var="backend_image_tag=stable"

  manual-rollback:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production-rollback
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    
    - name: Login to Azure using OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Configure Terraform for Azure Storage
      run: |
        echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
        echo "ARM_STORAGE_USE_AZUREAD=true" >> $GITHUB_ENV
    
    - name: Manual rollback to stable version
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform init
        terraform apply -auto-approve \
          -target=module.container_instances.azurerm_container_group.app \
          -var="frontend_image_tag=stable" \
          -var="backend_image_tag=stable"