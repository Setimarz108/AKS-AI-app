name: RetailBot CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  security-events: write

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  TF_WORKING_DIR: ./terraform

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      terraform: ${{ steps.filter.outputs.terraform }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'app/!(frontend)/**'
            frontend:
              - 'app/frontend/**'
            terraform:
              - 'terraform/**'

  build:
    needs: changes
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' &&
      (needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true')
    outputs:
      image-tag: ${{ steps.meta.outputs.tag }}
      backend-built: ${{ needs.changes.outputs.backend }}
      frontend-built: ${{ needs.changes.outputs.frontend }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }
      
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}
      
      - name: Generate image tag
        id: meta
        run: |
          TAG="${GITHUB_SHA:0:8}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Image tag: ${TAG}"
      
      - name: Build and push backend image
        if: needs.changes.outputs.backend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: |
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-api:${{ steps.meta.outputs.tag }}
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-api:latest
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-api:stable
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend
      
      - name: Build and push frontend image
        if: needs.changes.outputs.frontend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./app/frontend
          push: true
          tags: |
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-frontend:${{ steps.meta.outputs.tag }}
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-frontend:latest
            ${{ env.ACR_NAME }}.azurecr.io/retailbot-frontend:stable
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend
      
      - name: Scan backend image for vulnerabilities
        if: needs.changes.outputs.backend == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.ACR_NAME }}.azurecr.io/retailbot-api:${{ steps.meta.outputs.tag }}'
          format: 'sarif'
          output: 'trivy-backend-image.sarif'
          
      - name: Upload backend image scan results
        if: needs.changes.outputs.backend == 'true'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-backend-image.sarif'
          category: 'backend-image'
      
      - name: Scan frontend image for vulnerabilities
        if: needs.changes.outputs.frontend == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.ACR_NAME }}.azurecr.io/retailbot-frontend:${{ steps.meta.outputs.tag }}'
          format: 'sarif'
          output: 'trivy-frontend-image.sarif'
          
      - name: Upload frontend image scan results
        if: needs.changes.outputs.frontend == 'true'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-frontend-image.sarif'
          category: 'frontend-image'

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      github.ref == 'refs/heads/main' &&
      (needs.build.outputs.backend-built == 'true' || needs.build.outputs.frontend-built == 'true') &&
      needs.build.result == 'success'
    environment: production
    
    steps:
      - name: Deploy application
        uses: ./.github/workflows/terraform-apply.yml
        with:
          frontend_image_tag: ${{ needs.build.outputs.image-tag }}
          backend_image_tag: ${{ needs.build.outputs.image-tag }}
          run_plan: 'false'
          
      - name: Get deployment outputs
        run: |
          cd ${{ env.TF_WORKING_DIR }}
          export ARM_ACCESS_KEY="${{ secrets.AZURE_STORAGE_KEY }}"
          echo "Frontend URL: $(terraform output -raw frontend_url)"
          echo "Backend URL: $(terraform output -raw backend_url)"

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy]
    environment: production
    
    steps:
      - name: Automatic rollback to stable version
        uses: ./.github/workflows/terraform-apply.yml
        with:
          frontend_image_tag: 'stable'
          backend_image_tag: 'stable'
          run_plan: 'false'